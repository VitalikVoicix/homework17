{"version":3,"sources":["Header/header.js","Main/main.js","App.js","serviceWorker.js","index.js"],"names":["Header","MyTimer","expiryTimestamp","useTimer","onExpire","console","warn","seconds","minutes","isRunning","start","pause","useState","style","textAlign","fontSize","onClick","className","width","Main","time","Date","setSeconds","getSeconds","App","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+NAYeA,G,MATD,WACZ,OACE,6BACA,iDACA,qD,sBCmEJ,SAASC,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,gBAAmB,EAO5BC,mBAAS,CAAED,kBAAiBE,SAAU,kBAAMC,QAAQC,KAAK,sBAL7DC,EAFgC,EAEhCA,QACAC,EAHgC,EAGhCA,QACAC,EAJgC,EAIhCA,UACAC,EALgC,EAKhCA,MACAC,EANgC,EAMhCA,MANgC,EASNC,mBAAS,IATH,6BAWlC,OACE,yBAAKC,MAAO,CAACC,UAAW,WACtB,yBAAKD,MAAO,CAACE,SAAU,SACtB,8BAAOP,GADR,IACwB,8BAAOD,IAE/B,2BAAIE,EAAY,UAAY,eAE5B,4BAAQO,QAASN,GAAjB,SAEA,4BAAQM,QAASL,GAAjB,SAEA,yBAAKM,UAAU,OAAMJ,MAAO,CAAEK,MAAM,QAAD,OAAUX,EAAV,sBAA+BK,mBAAS,IAAxC,UAK1B,SAASO,IACtB,IAAMC,EAAO,IAAIC,KAEjB,OADAD,EAAKE,WAAWF,EAAKG,aAAe,IAElC,6BACE,kBAACtB,EAAD,CAASC,gBAAiBkB,KC1FnBI,MAZf,WAIE,OACE,yBAAKP,UAAU,MAAKJ,MAJZ,CACRY,gBAAgB,YAIZ,kBAAC,EAAD,MACA,kBAACN,EAAD,QCCYO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.08977102.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./header.css\"\r\n\r\nconst Header =()=>{\r\n  return(\r\n    <div>\r\n    <h1>Homework â„–17</h1>\r\n    <h2>\"React. Lifecycle\"</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React,{useState,useRef,useEffect} from \"react\"\r\nimport \"./main.css\"\r\nimport { useTimer } from 'react-timer-hook';\r\n\r\n{/*\r\nconst  Main =()=>{\r\nfunction padTime(time){\r\n    return time.toString().padStart(2,\"0\");\r\n}\r\n\r\nconst[timeLeft,setTimeLeft]=useState(30);\r\n\r\nconst [pause, setPause] = useState(false);\r\nconst intervalRef = useRef(null);\r\nconst minutes=padTime(Math.floor(timeLeft/60));\r\nconst seconds=padTime(timeLeft-minutes*60);\r\n\r\nconst buttonPress = () => {\r\n    setPause(!pause);\r\n}\r\nuseEffect(() => {\r\n    const cleanTimer = (event) => {\r\n        setPause(false);\r\n    }\r\n})\r\n\r\n\r\nconst {\r\n   pausee,\r\n    isRunning,\r\n    start,\r\n  } = useTimer()\r\n\r\n\r\n\r\nfunction startTimer(){\r\n   \r\n       intervalRef.current= setInterval(()=>{\r\n       setTimeLeft(timeLeft => {\r\n            if(timeLeft >= 1)return timeLeft -1;\r\n            return 0;\r\n        });\r\n    },1000)\r\n}\r\nfunction stopTimer(){\r\nclearInterval(intervalRef.current)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n return(\r\n  <div className=\"main\">\r\n     <div className=\"span\">\r\n         <span>{minutes}</span>\r\n         <span>:</span>\r\n         <span>{seconds}</span>\r\n      \r\n     </div>\r\n     <div className=\"btn\">\r\n     \r\n         <button onClick={startTimer}>Start</button>\r\n         \r\n        \r\n         <button onClick={stopTimer}>Stop</button> \r\n          \r\n\r\n    </div>\r\n     <div className=\"line\"style={{ width: `calc(${timeLeft} * (100% / ${useState(30)}))` }}></div>\r\n  </div>\r\n   )\r\n}\r\n*/ }\r\nfunction MyTimer({ expiryTimestamp }) {\r\n    const {\r\n      seconds,\r\n      minutes,\r\n      isRunning,\r\n      start,\r\n      pause,\r\n      } = useTimer({ expiryTimestamp, onExpire: () => console.warn('onExpire called') });\r\n\r\n    const[timeLeft,setTimeLeft]=useState(30);\r\n  \r\n    return (\r\n      <div style={{textAlign: 'center'}}>\r\n        <div style={{fontSize: '50px'}}>\r\n         <span>{minutes}</span>:<span>{seconds}</span>\r\n        </div>\r\n        <p>{isRunning ? 'Running' : 'Not running'}</p>\r\n      \r\n        <button onClick={start}>Start</button> \r\n        \r\n        <button onClick={pause}>Pause</button>\r\n      \r\n        <div className=\"line\"style={{ width: `calc(${seconds} * (100% / ${useState(30)}))` }}></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default function Main() {\r\n    const time = new Date();\r\n    time.setSeconds(time.getSeconds() + 30); \r\n    return (\r\n      <div>\r\n        <MyTimer expiryTimestamp={time} />\r\n      </div>\r\n    );\r\n  }\r\n///\r\n\r\n\r\n","import React from 'react';\nimport Header from\"./Header/header\"\nimport Main from \"./Main/main\"\n\nfunction App() {\n  let style={\n    backgroundColor:\"#CDCDCD\"\n  }\n  return (\n    <div className=\"App\"style={style}>\n        <Header />\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}